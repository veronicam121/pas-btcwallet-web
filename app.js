'use strict';

const express = require('express');
var app = express();
const bodyParser = require('body-parser');
var speakeasy = require('speakeasy');
var QRCode = require('qrcode');
const path = require('path');
var http = require('http');
var firebase = require('firebase');
var admin = require('firebase-admin');
const nodemailer = require('nodemailer');

const mailTransport = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'missau121',
    pass: 'vicariouslyilive1234',
  },
});

// Activates Two Factor Auth

var serviceAccount = require("./serviceAccountKey.json");

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://visionbitwallet.firebaseio.com"
});
var database = admin.database();

// Firebase Realtime Functions

var setSecretKey = function (key, uid) {
    database.ref('user/' + uid + '/token').set(key);
};

var getSecretKey  = function (uid) {
    return database.ref('user/' + uid + '/token')
    .once('value')
    .then(function(snapshot) {
        console.log(snapshot.val());
        return snapshot.val();
    });
};

var updateSecretKey = function (uid) {
    getSecretKey(uid).then((response) => {
        response.secret = response.tempSecret;
        response.tempSecret = null;
        setSecretKey(response, uid);
    })
}

var sendCodeToEmail = function(data_url, response) {
    console.log(data_url);
    const mailOptions = {
      from: '"Vision Wallet" <noreply@firebase.com>',
      to: response.email,
      subject: 'Has activado la opción de 2FA',
      text: 'Gracias por activar el segundo factor de autentificación en la aplicación Vision Wallet' + 
            'Es necesario que escanee el código QR a través de Google Autenticator o Authy',
      html: 'Código: <img src="cid:qrcode"/>',
        attachments: [{
        filename: 'image.png',
        path: data_url,
        cid: 'qrcode' //same cid value as in the html img src
    }]
    };

    console.log(mailOptions.html);
  
    // Building Email message.
  
    return mailTransport.sendMail(mailOptions)
      .then(() => console.log('New email'))
      .catch((error) => console.error('There was an error while sending the email:', error));
}

// Verifies the user has activated 2FAU

var verifySecret = function(secret, otp, uid, res) {
    var verified = speakeasy.totp.verify({
        secret: secret, //secret of the logged in user
        encoding: 'base32',
        token: otp
    });
    if(verified){
        // we need to update the secret
        updateSecretKey(uid);
        return res.status(200).send('2FA_ENABLED');
    }
    return res.status(400).send('INVALID_TOKEN');
};

// Verifies the OTP is valid, then gives permission to the user on the APP
var verifyOTP = function(secret, otp, res) {
    var verified = speakeasy.totp.verify({
        secret: secret,
        encoding: 'base32',
        token: otp,
    });
    if (verified){ //authenticate user
        return res.send('SUCCESS');
    }
    return res.status(400).send('INVALID_OTP');
}

// Verifies the ID Token generated by Firebase Auth on the Console
var verifyUser = function(token) {
    admin.auth()
    .verifyIdToken(token)
    .then((response) => {
        return response;
    })
    .catch((error) => {
        console.log(error);
    })
};

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: true
}));

app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});

// Allows a user to setup two factor auth
app.post('/twofactor/setup/enable', function(req, res){
    // we validate the id token
    verifyUser(req.body.idToken);
    console.log(req.body);
    const secret = speakeasy.generateSecret({length: 10});
        QRCode.toDataURL(secret.otpauth_url, (err, data_url)=> {
        setSecretKey({tempSecret: secret.base32, dataURL: data_url, otpURL: secret.otpauth_url, secret: ''}, req.body.uid);
        sendCodeToEmail(data_url, response);
        return res.json({
            message: 'VERIFY_OTP',
            tempSecret: secret.base32,
            dataURL: data_url,
            otpURL: secret.otpauth_url,
        });
    });
});

// Gets 2fa details
app.post('/twofactor/details', function(req, res){
    getSecretKey(req.body.uid).then((response) => {
        res.json(response);
    })
});

// Disables 2fa
app.delete('/twofactor/setup/disable', function(req, res){
    delete user.twofactor;
    res.send('DELETED_2FA');
});

app.post('/twofactor/setup/verify', function(req, res){
    getSecretKey(req.body.uid)
    .then((response) => {
        return verifySecret(response.tempSecret, req.body.token, req.body.uid, res)
    });
});

app.post('/twofactor/verify' , function(req, res){
    console.log(req);
    getSecretKey(req.body.uid)
    .then((response) => {
        return verifyOTP(response.secret, req.body.otp, res);
    })
});

app.listen('3000', ()=>{
    console.log('App running on 3000');
});